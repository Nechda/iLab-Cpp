cmake_minimum_required(VERSION 3.10)

set(E2E_INPUT "")
set(E2E_ANSW "")

macro(make_e2e_test input output)
    list(APPEND E2E_INPUT ${input})
    list(APPEND E2E_ANSW ${output})
endmacro()

make_e2e_test("1 2 1 1" "1")
make_e2e_test("1 2 1 2" "0")
make_e2e_test("2 2 1 1" "1")
make_e2e_test("2 2 1 2" "0")
make_e2e_test("2 4 1 1 2 2" "2")
make_e2e_test("2 7 1 1 3 2 2 2 1" "4")
make_e2e_test("3 7 1 1 3 2 2 2 1" "4")
make_e2e_test("4 7 1 2 1 3 2 4 5" "2")
make_e2e_test("3 12 1 2 3 4 3 3 3 5 5 5 5 1" "6")
make_e2e_test("3 15 7 0 1 2 0 3 0 4 2 3 0 3 2 1 2" "6")


find_program(BASH_PROGRAM bash)

function(gen_e2e_files)
if(BASH_PROGRAM)
    set(TEST_DIR "${CMAKE_CURRENT_BINARY_DIR}/t")
    execute_process(COMMAND ${BASH_PROGRAM} -c "cd ${TEST_DIR} || mkdir ${TEST_DIR}")

    list(LENGTH E2E_INPUT MAX_INDEX)
    math(EXPR MAX_INDEX "${MAX_INDEX} - 1")
    foreach(i RANGE 0 ${MAX_INDEX})
        list(GET E2E_INPUT ${i} CUR_TEST)
        list(GET E2E_ANSW ${i} CUR_ANSW)
        execute_process(COMMAND ${BASH_PROGRAM} -c "cd ${TEST_DIR} && echo ${CUR_TEST} > ${i}.in")
        execute_process(COMMAND ${BASH_PROGRAM} -c "cd ${TEST_DIR} && echo ${CUR_ANSW} > ${i}.out")
    endforeach()
endif(BASH_PROGRAM)
endfunction()

function(start_e2e_testing)
if(BASH_PROGRAM)
    message("=======Start end to end testing=======")
    list(LENGTH E2E_INPUT LIST_LEN)
    math(EXPR MAX_INDEX "${LIST_LEN} - 1")
    foreach(i RANGE 0 ${MAX_INDEX})
        list(GET E2E_INPUT ${i} CUR_TEST)
        list(GET E2E_ANSW ${i} CUR_ANSW)
        execute_process(COMMAND ${BASH_PROGRAM} -c "echo ${CUR_TEST} | ${CMAKE_CURRENT_BINARY_DIR}/cache" OUTPUT_VARIABLE OUT)
        execute_process(COMMAND ${BASH_PROGRAM} -c "echo \"${OUT}\" | tr -d \'\n\'" OUTPUT_VARIABLE OUT)
        set(CMD_CHECKER "echo \"${OUT}\" | grep -w ${CUR_ANSW} > /dev/null")
        execute_process(COMMAND ${BASH_PROGRAM} -c ${CMD_CHECKER} RESULT_VARIABLE RET_CODE)
        if(${RET_CODE} EQUAL 1)
            message("Test failed!")
            message("Input: ${CUR_TEST}")
            message("Output: ${OUT}")
            message("Expected: ${CUR_ANSW}")
            message("======================================")
            return()
        else()
            math(EXPR CUR_TEST_INDX "${i} + 1")
            message("[${CUR_TEST_INDX}/${LIST_LEN}] Ok")
        endif()
    endforeach()
    message("======================================")
endif(BASH_PROGRAM)
endfunction()

gen_e2e_files()
start_e2e_testing()
